# get input & output path
f_in <- NA
args = commandArgs(trailingOnly=TRUE)
args = commandArgs(trailingOnly=TRUE)
if (length(args)==0) {
args = commandArgs(trailingOnly=TRUE)
if (length(args)==0) {
stop("[USAGE] Rscript hw1_template.R --input input.csv --output output.csv", call.=FALSE)
}
# get input & output path
f_in <- NA
f_out <- NA
args = commandArgs(trailingOnly=TRUE)
if (length(args)==0) {
stop("[USAGE] Rscript hw1_template.R --input input.csv --output output.csv", call.=FALSE)
}
# get input & output path
f_in <- NA
f_out <- NA
# parse input & output
for (i in args) {
if (i == '--input') {
f_in <- args[which(args==i)+1]
}
if (i == '--output') {
f_out <- args[which(args==i)+1]
}
}
if (length(args)==0) {
stop("[USAGE] Rscript hw1_template.R --input input.csv --output output.csv", call.=FALSE)
}
setwd("C:/Users/user/Desktop/111-2/R/hw4-WilsonShih/111971005")
library(shiny)
# Define UI for app that draws a histogram ----
ui <- fluidPage(
# App title ----
titlePanel("Hello Shiny!"),
# Sidebar layout with input and output definitions ----
sidebarLayout(
# Sidebar panel for inputs ----
sidebarPanel(
# Input: Slider for the number of bins ----
sliderInput(inputId = "bins",
label = "Number of bins:",
min = 1,
max = 50,
value = 30)
),
# Main panel for displaying outputs ----
mainPanel(
# Output: Histogram ----
plotOutput(outputId = "distPlot")
)
)
)
# Define server logic required to draw a histogram ----
server <- function(input, output) {
# Histogram of the Old Faithful Geyser Data ----
# with requested number of bins
# This expression that generates a histogram is wrapped in a call
# to renderPlot to indicate that:
#
# 1. It is "reactive" and therefore should be automatically
#    re-executed when inputs (input$bins) change
# 2. Its output type is a plot
output$distPlot <- renderPlot({
x    <- faithful$waiting
bins <- seq(min(x), max(x), length.out = input$bins + 1)
hist(x, breaks = bins, col = "#75AADB", border = "white",
xlab = "Waiting time to next eruption (in mins)",
main = "Histogram of waiting times")
})
}
# Create Shiny app ----
shinyApp(ui = ui, server = server)
data(iris)
# log transform
log.ir <- log(iris[, 1:4])
ir.species <- iris[, 5]
# apply PCA - scale. = TRUE is highly advisable, but default is FALSE.
ir.pca <- prcomp(log.ir,center = TRUE, scale. = TRUE)
library(ggbiplot)
install(ggbiplot)
install.packages("ggbiplot")
data(iris)
# log transform
log.ir <- log(iris[, 1:4])
ir.species <- iris[, 5]
# apply PCA - scale. = TRUE is highly advisable, but default is FALSE.
ir.pca <- prcomp(log.ir,center = TRUE, scale. = TRUE)
library(ggbiplot)
install.packages(ggplot2)
install.packages("ggplot2")
install.packages("ggplot2")
install.packages("ggplot2")
install.packages("ggplot2")
data(iris)
# log transform
log.ir <- log(iris[, 1:4])
ir.species <- iris[, 5]
# apply PCA - scale. = TRUE is highly advisable, but default is FALSE.
ir.pca <- prcomp(log.ir,center = TRUE, scale. = TRUE)
library(ggbiplot)
install.packages("ggbiplot")
